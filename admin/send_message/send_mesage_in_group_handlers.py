"""—Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ"""
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from create_bot import dp
from aiogram import types, Dispatcher
from keyboard.keyboard_admin.keyboard_add_new_student import inline_kb_groups_func
from aiogram.dispatcher.filters import Text
from admin.moderarot.moderator import Moderator
from keyboard.keyboard_admin.keyboard_send_message_in_group import inline_kb_send_message_in_group, \
    inline_kb_send_message_in_group_confirmation_func
from admin.send_message.send_message_in_group import SendMesageInGroupCallback, GetIdTelegramGroup
from admin.send_message.yes_no_other_handlers import send_message
from client.registration_of_students.registration_student_handlers import cancel_process_command



class FSMAdminSendMessageInGroup(StatesGroup):
    message = State()
    callback_group = State()
    confirmation = State()


messege_send_message_in_group_callback = SendMesageInGroupCallback()


# @dp.message_handler(commands=['send_message_in_group'], state=None)
async def send_message_in_group_process_command(message: types.Message):
    """–∫–æ–º–∞–Ω–¥–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫–∞–µ–º –º—É—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É"""
    if not Moderator().check_moderator(id_telegram=message.from_user.id):
        await message.reply(f'–¢—ã –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!')
        return
    await FSMAdminSendMessageInGroup.message.set()
    await message.reply('–í—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É\n–≤–≤–µ–¥–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</b>')


# @dp.message_handler(state=FSMAdminSendMessageInGroup.message)
async def send_message_in_group_message_process_command(message: types.Message, state: FSMContext):
    """—Å–ª–µ–¥—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ send_message_in_group_process_command) –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π,
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º (–≤ –≥—Ä—É–ø–ø—É)"""
    async with state.proxy() as data:
        data['message'] = message.text
    await message.reply('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ <b>–≥—Ä—É–ø–ø—É</b> –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                        reply_markup=inline_kb_send_message_in_group())
    await FSMAdminSendMessageInGroup.next()


# –¥–æ—Ä–∞–±–∞—Ç—ã–∞–≤–∞–µ–º (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è)
async def update_num_text_send_message_in_group(message: types.Message, new_value):
    # –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.edit_text(f"{new_value}", reply_markup=inline_kb_send_message_in_group())


#
# # –¥–æ—Ä–∞–±–∞—Ç—ã–∞–≤–∞–µ–º (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è)
async def update_num_text_send_message_in_group_confirmation(message: types.Message, new_value):
    """–∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    await message.edit_text(f"{new_value}")


# @dp.callback_query_handler(Text(startswith="send_message_in_group_"), state=FSMAdminSendMessageInGroup.callback_group)
async def process_callback_kb_keyboard_send_message_in_group(callback_query: types.CallbackQuery, state: FSMContext):
    print(callback_query.data)
    message_groups = messege_send_message_in_group_callback.send_message_in_group_message(callback_query)
    await update_num_text_send_message_in_group(callback_query.message, message_groups)


# @dp.callback_query_handler(Text(startswith="send_send_message_in_group"),
#                            state=FSMAdminSendMessageInGroup.callback_group)
async def process_callback_kb_keyboard_send_send_message_in_group(callback_query: types.CallbackQuery,
                                                                  state: FSMContext):
    # print(messege_send_message_in_group_callback.num_groups,
    #       messege_send_message_in_group_callback.messege_send_message_in_group_callback, 'TEST')
    # await add_new_student_group_process_command(callback_query.message, state)
    await send_message_in_group_group_process_command(callback_query.message, state)


# @dp.message_handler(state=FSMAdminSendMessageInGroup.group) —ç—Ç–æ–≥–æ –∏ –Ω–µ –Ω–∞–¥–æ
async def send_message_in_group_group_process_command(message: types.Message, state: FSMContext):
    """—Å–ª–µ–¥—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ process_callback_kb_keyboard_send_send_message_in_group) –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π,
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥—Ä—É–ø–ø—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç"""
    # await message.reply('–ø–æ–∫–∞ —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç' + message.text)
    # await message.reply(str(messege_send_message_in_group_callback.num_groups))

    async with state.proxy() as data:
        data['group'] = messege_send_message_in_group_callback.num_groups  # –Ω–æ–º–µ—Ä–∞ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å
        await message.edit_text(f'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ'
                                f' <b>{messege_send_message_in_group_callback.messege_send_message_in_group_callback}</b>'
                                f' —Å–æ–æ–±—â–µ–Ω–∏–µ <b>{data.get("message")}</b>?',
                                reply_markup=inline_kb_send_message_in_group_confirmation_func())

    await FSMAdminSendMessageInGroup.next()


#
# @dp.callback_query_handler(Text(startswith="confirmation_send_msg_in_group"),
#                            state=FSMAdminSendMessageInGroup.confirmation)
async def send_message_in_group_confirmation_process_command(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'confirmation_send_msg_in_group_cancel':
        await callback_query.message.edit_text('–æ—Ç–º–µ–Ω—è—é')
        await cancel_process_command(callback_query.message, state)
        await update_num_text_send_message_in_group_confirmation(callback_query.message, f'üü• –æ—Ç–º–µ–Ω–∞')
    else:
        async with state.proxy() as data:
            for_callback = messege_send_message_in_group_callback.for_callback(question=data.get('message'))
            await send_message(message=callback_query.message,
                               message_for_send=data.get('message'),
                               data_id_telegram=GetIdTelegramGroup().get_students_for_send_message(
                                   messege_send_message_in_group_callback.num_groups), for_callback=for_callback)
            await update_num_text_send_message_in_group_confirmation(callback_query.message,
                                                                     f'‚úÖ —Å–æ–æ–±—â–µ–Ω–∏–µ  <b>{data.get("message")}'
                                                                     f'</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        # await callback_query.message.edit_text('–Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç')
    messege_send_message_in_group_callback.delete_last_info()  # —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    await state.finish()  # –ø–æ–∫–∞ —á—Ç–æ finish


def register_handlers_admin_send_message_in_group(dp: Dispatcher):
    dp.register_message_handler(send_message_in_group_process_command, commands=['send_message_in_group'], state=None)
    dp.register_message_handler(send_message_in_group_message_process_command,
                                state=FSMAdminSendMessageInGroup.message),
    dp.register_callback_query_handler(process_callback_kb_keyboard_send_message_in_group,
                                       Text(startswith="send_message_in_group_"),
                                       state=FSMAdminSendMessageInGroup.callback_group),
    dp.register_callback_query_handler(process_callback_kb_keyboard_send_send_message_in_group,
                                       Text(startswith="send_send_message_in_group"),
                                       state=FSMAdminSendMessageInGroup.callback_group),
    dp.register_callback_query_handler(send_message_in_group_confirmation_process_command,
                                       Text(startswith="confirmation_send_msg_in_group"),
                                       state=FSMAdminSendMessageInGroup.confirmation)
